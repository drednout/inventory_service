version: '3.8'

services:
  inventory-db:
    container_name: inventory-db
    image: 'postgres:16.1'
    shm_size: 1g
    privileged: true
    environment:
      - POSTGRES_DB=inventory_service
      - POSTGRES_USER=inventory_service
      - POSTGRES_PASSWORD=inventory_service
      - POSTGRES_HOST=localhost
      - POSTGRES_PORT=5432
    ports:
      - '5432:5432'
    volumes:
      - 'db_data:/var/lib/postgresql/data'
  inventory-db-migration:
    container_name: inventory-db-migration
    image: sdbmigrate
    entrypoint: []
    command: ['./wait-for-it.sh', '${DATABASE_HOST}:${DATABASE_PORT}', '--timeout=${DATABASE_WAIT_TIMEOUT}', '--',
              'bash', '/run_migrations.sh']
              #'sdbmigrate.py', '-c', 'inventory_sdbmigrate.yaml', '-d', 'db_migrations']
    build:
      context: .
      dockerfile: docker/Dockerfile.sdbmigrate
    depends_on:
      - inventory-db

  inventory-service:
    container_name: inventory-service
    image: inventory-service
    entrypoint: []
    command: ['./wait-for-it.sh', '${DATABASE_HOST}:${DATABASE_PORT}', '--timeout=${DATABASE_WAIT_TIMEOUT}', '--',
              'bash', './docker/run_inventory.sh']
    build:
      context: .
      dockerfile: docker/Dockerfile.inventory
    ports:
      - '8080:8080'
    depends_on:
      - inventory-db
      - inventory-db-migration

  locust:
    container_name: locust
    image: locust
    entrypoint: []
    command: ['locust', '-f', 'inventory_service_locustfile.py']
    working_dir: /perf_tests
    build:
      context: .
      dockerfile: docker/Dockerfile.locust
    ports:
      - '8089:8089'

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prom_data:/prometheus
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    restart: unless-stopped
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources

#  jenkins:
#    image: jenkins/jenkins:lts
#    restart: always
#    privileged: true
#    user: root
#    ports:
#      - 18080:8080
#      - 50000:50000
#    container_name: jenkins
#    volumes:
#      - ./docker/jenkins:/var/jenkins_home
#      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db_data:
  prom_data:
